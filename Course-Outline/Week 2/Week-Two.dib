#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

<h2>.Net week 2 Course Outline</h2>
<h3> Complex Data Structures</h3>

- ArrayList   
- LinkedList  
- Stacks 
- Queues  
- HashTable  
- Indexer  
- Delegates
- Lambda  
- Generics  
- Events 

#!markdown

<center> <h1> Complex Data Structures  </h1> </center>

<h2> Data Structures </h2>
<p> Data structure can be categorized into two types: <i>primitive</i> data structures and <i>non-primitive</i> data strucures  </p>

- **`Primitive data structures`** are the most basic data structure available in a programming language, such as integers, floating-point numbers, characters, and booleans.
- **`Non-primitve data structures`** are more complex and can be divided into four categories:
    - **_Linear data structures_** are those in which the elements are arranged in sequential manner, such as arrays, lists, stacks and queue.
    - **_Tree data structures_** are those in which the elements are arranged in hierarchical manner, such as binary trees, AVL trees and B-trees.
    - **_Hash data structures_** are those that use a hash function to compute an index into an array of buckets or slots, such as hash tables and hash maps.
    - **_Graph data structures_** are those that represent a set of objects where some pairs of the objects are connected by links, such as directed graphs, undirectedd graphs and weighted graphs.

#!markdown

<h3>Data Structures in C#</h3>
<p>A data structure is a way of organizing and storing data in a computer so that it can be accessed and modified efficiently.</p>
<p>Complex data structures are those that are composed of other data structures.</p>
<p>C# provides several built-in data structures that can be used to store collections of related data:</p>  

- **`Arrays:`** are the simplest data structure. They are used to store a fixed-size sequential collection of elements of the same type.

#!csharp

// Example on how to create Array using the Array class in C#
using System.Collections;

int[] myArray = {}; // empty integer array
var myArray2 = new int[]{1,2,4}; // integer array of three elements
var myArray3 = new string[9]; // an array of size 9 that can store collection of string data
myArray3[0] = "John"; // store John as the first element of myArray3

#!markdown

- **`Lists:`** are similar to arrays but can grow or shrink dynamically as elements are added or removed.

#!csharp

// Example on how to create List using the Generic List<T> class in C#
using System.Collections.Generic;

List<int> myList = new List<int>(); // empty list that can store collection of integer data
var myList2 = new List<string>(); // empty list that can store collection of string data
var myList3 = new List<string>
{
    "John", "McCall"
};// a list that contains two element 

// Add element to a list
myList.Add(6); // add a single element to myList
myList.AddRange(new List<int>{2,4,5}); // add more than one element to myList
myList2.Add("Michael"); // add a single element to myList
myList2.AddRange(new List<string> {"Kyle", "Declan"});

#!markdown

- **`Dictionaries and hash tables:`** are used to store key-value pairs. They allow a quick look up of values based ono their keys.

#!csharp

// Example on how to create List using the Generic Dictionary<TKey, TValue> class in C#
using System.Collections.Generic;

var dict = new Dictionary<int, int>(); // an empty Dictionary with an integer key and value.
dict.Add(1,89);
//dict.Add("John", 98);

// Example on how to create List using the Generic Hashtable<TKey, TValue> class in C#
var hash = new Hashtable();
hash.Add(1,89);
hash.Add("John", 98);

#!markdown

<p>There are also more complex data structures like <b>trees, graphs, and heaps</b> that can be implemented using C#.
These data structures are used in more advanced algorithms and applications.</p>

#!markdown

<h2>ArrayList</h2>

An `ArrayList` is a non-generic collection of objects whose size increases dynamically. It is the same as an array except that its size increases dynamically. An ArrayList can be used to add unknown data where you don't know the types and the size of the data. 

#!csharp

// Example of how to create an ArrayList using the ArrayList class in C#:
using System.Collections.Generic;

ArrayList firstList = new ArrayList();
var secondList = new ArrayList(){"Hello", 3, true};

firstList.Add(true);
secondList.Remove(3);

#!markdown

### ArrayList `vs` Array
<p>The primary difference between ArrayList and Array is the flexibility and type safety, with ArrayList offering dynamic resizing and storage of multiple data types, array provides better performance and type safety but have a fixed size.

| | ArrayList | Array |
|-|-----------|-------|
| `Implementation` | Dynamic-sized array | Simple fixed-sized array |
| `Data types` | Contain only object elements | Contain both primitives and objects |
| `Data manipulation` | Has methods for data manipulation | Requires manual resizing | 

#!markdown

### ArrayList `vs` List
<p>The primary difference between ArrayList and Array is that ArrayList is a <b>non-generic</b> collection class that can store objects of any type, while List is a <b>generic</b> collection class that can store objects of specific type.</p>

| | ArrayList | List |
|-|-----------|-------|
| `Type Safety` | It's not type-safe because it is a non-generic collection class | It's type-safe because it is a generic collection class |
| `Performance` | Require boxing and unboxing operations | Better performance because it does not require boxing and unboxing operations |
| `Data manipulation` | Requires manual resizing | Has methods for data manipulation | 

#!markdown

<h2>LinkedList</h2>

A linked list is a linear data structure, in which the elements are not stored at contiguous memory locations. LinkedList is a generic type of collection which is defined in `System.Collections.Generic` namespace. LinkedList is different from other data structures like arrays and ArrayList because it is not indexed. Instead, it uses pointers to link each element to the next one in the list.
<p>Linked list is a collection of nodes where each node has a reference to the next node in the list. It provides fast insertion and removal of elements at any position in the list, but accessing elements by index can be slow becauase you have to traverse the list from the beginning to find the element you want.</p>

<p>Here's a diagram of a Linked List</p>

![alt Linked List](images/Linkedlist.png)  
[Linked List](https://www.geeksforgeeks.org/data-structures/linked-list/)

In simple words, a linked list consists of nodes where each node contains a data field and a reference(link) to the next node in the list.

#!markdown

### Type of Linked List

- `Singly Linked List (SLL):` is a collection of nodes where each node has a reference to the next node in the list. The last node in the list has a reference to null. It can be traversed only in forward direction.

<p>Here's a diagram of a Singly Linked List</p>

![alt Singly Linked List](images/Singly%20Linkedlist.png)  
[*Singly Linked List*](https://www.geeksforgeeks.org/data-structures/linked-list/singly-linked-list/)


### Pros and Cons of Linked List.


| | Pros |
|-|-----------|
| `Dynamic data structure` | 1. It's dynamic arrangment so it can grow and shrink at runtime by allocating and deallocating memory |
| | 2. There is no need to give the initial size of the linked list |
| `Efficient memory utilization` | It's efficient in utilizing memory since it allocates memory as per the requirment |
| `Insertion and Deletion Operations` | Insertion and deletion operations are easier because there is no need to shift elements after insertion or deletion of an element. |  

<p></p>

| | Cons |
|-|-----------|
| `Random access` | Random access is not possible, there is need to traverse the list from the beginning to find the element we want |
| `Extra memory space for pointers` | Extra memory space is required for storing pointers with each element of the list |

#!csharp

//Here is an example of a singly linked list in C#:

class Node
{
    public int data;
    public Node next;
    public Node(int d)
    {
        data = d;
        next = null;
    }
}

class LinkedList
{
    Node head;

    public void push(int new_data)
    {
        Node new_node = new Node(new_data);
        new_node.next = head;
        head = new_node;
    }
}

#!markdown

- `Doubly Linked List (DLL):` is a special type of linked list in which each node contains a pointer to the previous node as well as the next node of the linked list. It can be traversed in forward and backward direction

<p>Here's a diagram of a doubly Linked List</p>

![alt Doubly Linked List](images/Doubly%20Linkedlist.png)  
[*Doubly Linked List*](https://www.geeksforgeeks.org/data-structures/linked-list/doubly-linked-list/)

#!csharp

// Here is an example of a doubly linked list in C#:

class Node
{
    public int data;
    public Node next;
    public Node prev;
    public Node(int d)
    {
        data = d;
        next = null;
        prev = null;
    }
}

class DoublyLinkedList
{
    Node head;

    public void push(int new_data)
    {
        Node new_node = new Node(new_data);
        new_node.next = head;
        new_node.prev = null;

        if (head != null)
            head.prev = new_node;

        head = new_node;
    }
}

#!markdown

- `Singly Circular Linked List (SCLL):` is a linked list where the last node points to the first node. The last element contains link to the first element as next.

<p>Here's a diagram of a Singly Circular Linked List</p>

![alt Singly Circular Linked List](images/CircularSinglyLinkedList.png)  
[*Singly Circular Linked List*](https://www.geeksforgeeks.org/circular-singly-linked-list-insertion/)

#!csharp

// Here is an example of a singly circular linked list in C#:

class Node
{
    public int data;
    public Node next;
    public Node(int d)
    {
        data = d;
        next = null;
    }
}

class SinglyCircularLinkedList
{
    Node head;

    public void push(int new_data)
    {
        Node new_node = new Node(new_data);
        Node temp = head;

        new_node.next = head;

        if (head != null)
        {
            while (temp.next != head)
                temp = temp.next;

            temp.next = new_node;
        }
        else
            new_node.next = new_node;

        head = new_node;
    }
}

#!markdown

- `Doubly Circular Linked List (DCLL):` is a linked list that has the features of both the doubly linked list and the circular linked list. In a doubly circular linked list, two nodes are connected or linked together by the previous and the next pointers, and the last node of the doubly circular linked list is connected to the first node of the list.

<p>Here's a diagram of a Doubly Circular Linked List </p>

![alt Doubly Circular Linked List](images/doubly-660x177.jpg)  
[*Doubly Circular Linked List*](https://www.geeksforgeeks.org/insertion-in-doubly-circular-linked-list/)

#!csharp

// Here is an example of a doubly circular linked list in C#:

class Node
{
    public int data;
    public Node next;
    public Node prev;
    public Node(int d)
    {
        data = d;
        next = null;
        prev = null;
    }
}

class DoublyCircularLinkedList
{
    Node head;

    public void push(int new_data)
    {
        Node new_node = new Node(new_data);
        new_node.next = head;

        if (head != null)
            head.prev = new_node;

        head = new_node;

        Node last = head;
        while (last.next != null)
            last = last.next;

        last.next = head;
        head.prev = last;
    }
}

#!markdown

| Linked List | Pros | Cons |
|-|-----------|-------|
| `Singly` | 1. Less memory is required for storing the members (2 members - data and next) | 1. It's not efficient for reverse traversing |
| | 2. During excution, memory is easily allocated and deallocated | 2. Cannot be iterated in reverse |
| | 3. Insertion and Deletion don't require the shifting of all elements | 3. Requires more memory to store pointers |
| | 4. Requires less access time  |  |
| `Doubly` | 1. Efficient traversal in both forward and backward directions. | 1.Traversing can be slower than singly linked list |
| | 2. Insertion and Deletion operations are easier to implement than singly linked lists | 2. Implementing and maintaining can be more complex than singly linked list |
| | 3. Can be used for implementing stacks and queues. | |
| `Singly Circular` | 1. Can be used for implementing queues. | 1. Traversing can be slower than singly linked list | 
| | 2. Can be used for implementing round-robin scheduling | 2. Implementing and maintaining can be more complex than singly linked list |
| `Doubly Circular` | 1. `Efficient traversal:` Allow efficient traversal in both forward and backward directions. This makes it useful for applications where bidirectional traversal is required, such as in music playlists or video players | 1. `Slower traversal:` Traversing can be slower than traversing a singly linked list | 
| | 2. `Navigation systems:` It's used in navigation systems where front and back navigation is required | 2. `Complexity:` Implementing and maintaining can be more complex than singly linked lists |  

#!markdown

<h2>Stacks</h2>

Stack is a special type of collection that stores elements in LIFO style (Last In First Out). It is recommended to use the generic Stack<`T`> collection. The Stack class represents a last-in, first-out (LIFO) stack of objects.  
<p>When you add an item to the top of the stack, it is called pushing an item onto the stack. When you remove an item from the top of the stack, it is called popping an item off the stack. 
<p>For example, if you push 1, 2, 3, 4 and 5 onto a stack, the order of items in the stack will be 5, 4, 3, 2 and 1. If you pop an item off the stack, it will remove 5 from the stack.</p>

#!csharp

//Here is an example of C# code that demonstrates LIFO using Stack class:
using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        // create a stack
        Stack<string> stack = new Stack<string>();

        // push items onto the stack
        stack.Push("apple");
        stack.Push("banana");
        stack.Push("cherry");

        // pop items off the stack
        while (stack.Count > 0)
        {
            string item = stack.Pop();
            Console.WriteLine(item);
        }
    }
}

#!markdown

### Pros and Cons of Using Stack.

#!markdown

## Indexer
An indexer is a special type of property that allow elements of an object to be accessed like an array. Indexers are defined using the `this` keyword followed by `square brackets`[ ] containing the `index parameter` *int i*. The `get` and `set` accessors are used to retrieve and assign values to the indexer respectively.

#!csharp

//Here is an example of how to use an indexer in C#:

class MyClass
{
    private int[] arr = new int[10];

    public int this[int i]
    {
        get { return arr[i]; }
        set { arr[i] = value; }
    }
}

#!csharp

MyClass obj = new MyClass();
obj[0] = 10;
int x = obj[0];
obj[0]

#!markdown

## Delegates  

Delegates are a type of variable that can hold a reference to a method or an object that references a method.  
- Delegates allow method to be passed as parameters. 
- They can be used to define a callback function.
- Delegate is a type that safely encapsulate a method.

<p>The syntax for defining a delegate is as follows:  </p>

[Access Modifier] `delegate` [Return Type] [`Delegate Name`] (Parameter List)

#!csharp

// Here is an example of a delegate
public delegate int myDelegate(int a, int b); 
// a delegate name myDelegate that takes two integer parameters and returns and integer value.

#!csharp

// Here is an example of how delegate works
public int Add(int x, int y) => x+y;

#!csharp

myDelegate del = Add;
del(5,4)

#!markdown

## Lambda Expression

A Lambda expression is an anonymous function that can be used to create delegates or expression tree types.

### Characteristics:
- They are helpful for writing LINQ query expressions.
- They are anonymous (does not have a name).
- They can contain expressions and statements.
- They can be used to create delegates or expression tree types.

#!csharp

// Here is an example of a lambda expression  
(int x) => x*x

#!csharp

(int x, int y) => x + y

#!markdown

## Generics

Generics is a feature that allows for the creation of reusable code by creating parameterized types.  
In simple terms, it enables the creation of classess, interfaces, and methods that work with different data types without having to define the type explicity.


### Benefits of using Generics
- Code resuablility
- Compile-time type checking
- Better debugging experience
- Type safety
- Performance boost

#!csharp

// Here is the syntax for declaring any generic classs
public class GenericList<G>
{
    public string Method1(G input)
    {
        return "";
    }
}

#!markdown

## Events

An event is an encapsulated delegate.  
An event is a notification sent by an object to signal the occurence of an action.

- It is dependent on delegate.
- The delegate defines the signature for the event handler method of the subscriber.
