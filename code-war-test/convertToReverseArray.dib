#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

int nums = 35231;
Console.WriteLine(nums%10);
Console.WriteLine(nums/10);

#!csharp

int nums = 35231;
string numN = nums.ToString();
Console.Write(numN.Length);

#!csharp

int nums = 10;
while (nums < 20)
{
    //int numbers = 23;
    int n = nums%10;
    Console.WriteLine(n);
    //nums /=10;
    nums ++;
}

#!csharp

int nums = 35231;
string numN = nums.ToString();
int length = numN.Length;

int[] arr = {};
while (nums < 0)
{
    //for (int i = 0; i < length; i++)
    //{
        arr[nums] = nums%10;
        nums = nums/10;
        nums ++;
    //}
}
Console.WriteLine(arr);

foreach(int item in arr)
{
    Console.Write(item + " ");
}
Console.WriteLine(",");

#!csharp

int nums = 456533;
List<int> list = new List<int>();

if (nums < 10)
{
    list.Add(nums);
} else
{
    while (nums > 0)
    {
        list.Add(nums%10);
        nums /=10;
    }
}

int[] arr = list.ToArray();


Console.WriteLine(arr);
foreach(int item in arr)
{
    Console.Write(item);
}

#!markdown

Write a function which calculates the average of the numbers in a given list.

Note: Empty arrays should return 0.

#!csharp

long[] arr = {1,2,3};
if (arr.Length > 0) //Test for method .Length
{
    Console.Write("Not equals Zero");
}

#!csharp

long[] arr = {1,2,3,4,5};
long average,sum = 0;
if (arr.Length == 0)
{
    average = 0;
} else
{
    for(int i = 0; i < arr.Length; i++)
    {
        sum += arr[i];
    }
    average = sum/arr.Length;
}

Console.Write(average);

#!markdown

Nathan loves cycling.

Because Nathan knows it is important to stay hydrated, he drinks 0.5 litres of water per hour of cycling.

You get given the time in hours and you need to return the number of litres Nathan will drink, rounded to the smallest value.

For example:

#!markdown

time = 3 ----> litres = 1

time = 6.7---> litres = 3

time = 11.8--> litres = 5

#!markdown

Nathan takes 0.5 litres of water per cycle, if nathan drink water 3 times, how many litres of water did nathan take .?
1st time = 0.5
second time = 0.5
third time = 0.5
0.5 + 0.5 + 0.5 = 1.5 => 1
0.5 * 6.7 = 3.4 => 3

#!csharp

double sum;
sum = Math.Floor(3.9);
Console.Write(sum);

#!csharp

double times = 6.7;
double waterPerHour = 0.5;
double litres =  times * waterPerHour;
//litres = Convert.ToInt64(litres);
litres = Math.Floor(litres);
//litres = Convert.ToInt32(Math.Floor(times*waterPerHour));
Console.Write(litres);

#!csharp

double times = 89;
double div = Math.Floor(times*waterPH);
int litres = Convert.ToInt32(div);
Console.Write(litres);

#!csharp

double times = 3;
long litres;
litres = (int)(times/2);
Console.Write(litres);

#!markdown

A hero is on his way to the castle to complete his mission. However, he's been told that the castle is surrounded with a couple of powerful dragons! each dragon takes 2 bullets to be defeated, our hero has no idea how many bullets he should carry.. Assuming he's gonna grab a specific given number of bullets and move forward to fight another specific given number of dragons, will he survive?

Return true if yes, false otherwise :)

#!csharp

int bullets = 60;
int dragons = 40;
bool victory;
if (bullets >= dragons*2)
{
    victory = true;
} else
{
    victory = false;
}
Console.Write(victory);

#!csharp

int bullets =120, dragons = 40;
bool victory = bullets / 3 >= dragons;
Console.Write(victory);

#!csharp

int bullets =80, dragons = 40;
bool victory = bullets >= dragons*2;
Console.Write(victory);

#!markdown

Introduction
The first century spans from the year 1 up to and including the year 100, the second century - from the year 101 up to and including the year 200, etc.

Task
Given a year, return the century it is in.

Examples
1705 --> 18;
1900 --> 19;
1601 --> 17;
2000 --> 20;

#!csharp

double year = 1901;
double century = Math.Ceiling(year/100);
Console.Write(century);

#!csharp

int year = 100;
int century = year/100;
if (year%100 > 0)
{
    century++;
}
Console.WriteLine(century);

#!csharp

int century = year/100;
Console.WriteLine(year/100);
Console.Write(year%100);

#!csharp

int year = 101;
century = (year-1)/100 + 1;
Console.Write(century);

#!markdown

Insertion Sort

#!csharp

int[] arr = {5,4,2,6,1,3};
for (int i = 2; i < arr.Length; i++)
{
    int key = arr[i];
    // Insert arr[i] into the sorted sequence arr[i-1]
    int j = i -1;
    while(j > 0 && arr[i] > key)
    {
        arr[j+1] = arr[j];
        j -= 1;
    }
    arr[j+1] = key;
}

foreach(int item in arr)
{
    Console.Write(item+" ");
}

#!markdown

Algorithm
Sum of the first nth prime numbers

Example
3 --> 5;
7 --> 17; 
100 -->

#!csharp

Console.WriteLine("Prime numbers: ");
int nums = 100, sum = 0;
for (int i = 2; i < nums; i++)
{
    bool isPrime = true;
    for (int j = 2; j < i; j++)
    {
        if (i % j == 0)
        {
            isPrime = false;
            break;
        }
    }
    if (isPrime)
    {
        Console.WriteLine(i);
    }
 
}

#!csharp

//using System;

Console.WriteLine("Prime numbers: ");
for (int i = 2; i < 100; i++)
{
    bool isPrime = true;
    for (int j = 2; j < i/2; j++)
    {
        if (i % j == 0)
        {
            isPrime = false;
            break;
        }
    }
    if (isPrime == true)
    {
        Console.WriteLine(i);
    }
}
