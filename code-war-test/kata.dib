#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

Write a function that takes an array of numbers (integers for the tests) and a target number. It should find two different items in the array that, when added together, give the target value. The indices of these items should then be returned in a tuple / list (depending on your language) like so: (index1, index2).

For the purposes of this kata, some tests may have multiple answers; any valid solutions will be accepted.

The input will always be valid (numbers will be an array of length 2 or greater, and all of the items will be numbers; target will always be the sum of two different items from that array).

Based on: http://oj.leetcode.com/problems/two-sum/

two_sum([1, 2, 3], 4) == {0, 2}

#!csharp

public class Kata
{
  public static int[] TwoSum(int[] numbers, int target)
  {
    
    int[] indexes = new int[2];

    for (int i = 0; i < numbers.Length; i++) // picker
    {
        for (int j = i + 1; j < numbers.Length; j++) // additional
        {
            if (numbers[i] + numbers[j] == target)
            {
                indexes[0] = i;
                indexes[1] = j;
                return indexes;
            }
        }
    }

    return new int[0];
}

  
}

#!csharp

int[] arr = {1,2,3};
int target = 4;
//Kata.TwoSum(arr, target)
Kata.TwoSum(new int [] {1,4,5,3,5,7}, 6)

#!markdown

DESCRIPTION:
Summation
Write a program that finds the summation of every number from 1 to num. The number will always be a positive integer greater than 0.

For example (Input -> Output):

2 -> 3 (1 + 2)
8 -> 36 (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8)

#!csharp

public static int summation(int num)
    {
      //Code here
      int sum = 0;
      for (int i = 1; i < num+1; i++)
      {
        sum += i;
      }
      return sum;
    }

#!csharp

summation(56)

#!markdown

Cool Solutions

#!csharp

// Cool solutions
public static int summation(int num)
    {
      return Enumerable.Range(1, num).Sum();
    }

#!csharp

public static int summation(int num)
    {
      return num*(num+1)/2;
    }

#!csharp

public static int summation(int n) => n * ++n / 2;

#!markdown

DESCRIPTION:
Your task is to make two functions ( max and min, or maximum and minimum, etc., depending on the language ) that receive a list of integers as input, and return the largest and lowest number in that list, respectively.

Examples (Input -> Output)
* [4,6,2,1,9,63,-134,566]         -> max = 566, min = -134
* [-52, 56, 30, 29, -54, 0, -110] -> min = -110, max = 56
* [42, 54, 65, 87, 0]             -> min = 0, max = 87
* [5]                             -> min = 5, max = 5

#!csharp

using System.Collections.Generic;
public int Min(int[] list)
  {
    return list.Min();
  }
  
  public int Max(int[] list)
  {
    return list.Max();
  }

#!csharp

int[] arr = {4,6,2,1,9,63,-134,566};
Min(arr);
Max(arr);
Max(new[] {4,6,2,1,9,63,-134,566})

#!csharp

public int Min(int[] list)
  {
    int temp;
    for (int i = 0; i <= list.Length-2; i++)
    {
        for (int j = 0; j <= list.Length-2; j++)
        {
            if(list[j] > list[j+1])
            {
                temp = list[j+1];
                list[j+1] = list[j];
                list[j] = temp;
            }
        }
    }
    return list[0];
  }
  
  public int Max(int[] list)
  {
    int temp;
    for (int i = 0; i <= list.Length-2; i++)
    {
        for (int j = 0; j <= list.Length-2; j++)
        {
            if(list[j] > list[j+1])
            {
                temp = list[j+1];
                list[j+1] = list[j];
                list[j] = temp;
            }
        }
    }
    return list[list.Length-1];
  }

#!csharp

Max(new[] {4,6,2,1,9,63,-134,566});
Min(new[] {4,6,2,1,9,63,-134,566})

#!markdown

DESCRIPTION:
Write function bmi that calculates body mass index (bmi = weight / height^2).

if bmi <= 18.5 return "Underweight"

if bmi <= 25.0 return "Normal"

if bmi <= 30.0 return "Overweight"

if bmi > 30 return "Obese"

#!csharp

public static string Bmi(double weight, double height)
  {
    double bmi = weight/(height*height);
    string bmiCategory = bmi < 18.5 ? "Underweight" :
        bmi > 18.5 && bmi < 25.0 ? "Normal" :
        bmi > 25.0 && bmi < 30.0 ? "Overweight" : "Obese";
    return bmiCategory;
  }

#!csharp

Bmi(56,6)

#!markdown

DESCRIPTION:
You are given two interior angles (in degrees) of a triangle.

Write a function to return the 3rd.

Note: only positive integers will be tested.

https://en.wikipedia.org/wiki/Triangle

FUNDAMENTALS

#!csharp

 public static int OtherAngle(int a, int b)
  {
    //throw new NotImplementedException();
    return 180 - (a+b);
  }

#!markdown

DESCRIPTION:
We need a function that can transform a number (integer) into a string.

What ways of achieving this do you know?

Examples (input --> output):
123  --> "123"
999  --> "999"
-100 --> "-100"

#!csharp

public static string NumberToString(int num)
  {
    // code here
    return Convert.ToString(num);
  }

#!csharp

NumberToString(832)

#!markdown

DESCRIPTION:
Given two integers a and b, which can be positive or negative, find the sum of all the integers between and including them and return it. If the two numbers are equal return a or b.

Note: a and b are not ordered!

Examples (a, b) --> output (explanation)
(1, 0) --> 1 (1 + 0 = 1)
(1, 2) --> 3 (1 + 2 = 3)
(0, 1) --> 1 (0 + 1 = 1)
(1, 1) --> 1 (1 since both are same)
(-1, 0) --> -1 (-1 + 0 = -1)
(-1, 2) --> 2 (-1 + 0 + 1 + 2 = 2)

#!csharp

 public int GetSum(int a, int b)
     {
       //Good Luck!
       if (a == b)
       {
        return a;
       } else
       
       if (b < 0)
       {
            int sumB =0;
            for (int i = a; i >= b-1; i--)
                {
                    sumB += i;
                    return sumB;
                }
       } else
       {
            int sum = 0;
       for (int i = a; i <= b; i++)
       {

         sum += i;
         return sum;
       }
       }
       
       return 0;
     }

#!csharp

int sum = 0;
for (int i = 0; i >= -1; i--)
    {
        sum +=i;
    }

sum

#!csharp

GetSum(0,-1)

#!csharp

string sentence = "This is a string";
string word = sentence.Split()[3];
int third = 5;
//word
/* for (int i = 0; i < third-1; i++)
{
    word += "-"+word;
}
word */
word+"-"

#!csharp

string bar = "abc-";
string foo = string.Concat(Enumerable.Repeat(bar,4));
foo

#!csharp

public string EvenOrOdd(int number) => number % 2 == 0 ? "Even" : "Odd";

#!csharp

EvenOrOdd(5)

#!csharp

public string EvenOrOdd(int number)
{
    if (number % 2 == 0)
    {
        return "Even";
    } else {return "Odd";}
}

#!csharp

EvenOrOdd(-1)

#!markdown

Implement a function that accepts 3 integer values a, b, c. The function should return true if a triangle can be built with the sides of given length and false in any other case.

(In this case, all triangles must have surface greater than 0 to be accepted).

#!csharp

 public static bool IsTriangle(int a, int b, int c)
    {
        
        // formula steps
        // a + b > c
        // a + c > b
        // b + c > a
      return a+b > c && a+c > b && b+c>a ? true:false;
    }

#!csharp

IsTriangle(2,3,5)

#!csharp

// other solutions
public class Triangle
{
    public static bool IsTriangle(int a, int b, int c) => 
      a > 0 && b > 0 && c > 0 && a + b > c && a + c > b && b + c > a;
}

#!csharp

using System;
using System.Collections.Generic;

public class Triangle
{
    public static bool IsTriangle(int a, int b, int c)
    {
    		var lengths = new List<int>() {a, b, c};
        lengths.Sort();
        return lengths[0] + lengths[1] > lengths[2];
    }
}

#!markdown

Simple, given a string of words, return the length of the shortest word(s).

String will never be empty and you do not need to account for different data types.

#!csharp

  using System.Collections.Generic;
  using System.Linq;
  public static int FindShort(string s)
  {
    string[] splits = s.Split();
    int length = splits.Length;
    int[] intSplits = new int[length];
    if (length > 0)
    {
        for(int i = 0; i <length; i ++)
        {
          intSplits[i] = splits[i].Length;
        }
        return intSplits.Min();
    }
    return 0;
  }

#!csharp

FindShort("John is the Best")

#!csharp

/* using System.Collections.Generic;
string s = "John is coming home";
string[] splits = s.Split();
int[] intSplits = new int[4];
intSplits[0] = splits[0].Length;
intSplits.Min() */

#!csharp

// other cool solutions
using System.Linq;
public class Kata
{
  public static int FindShort(string s)
  {
    return s.Split(' ').Min(x => x.Length);
  }
}

#!csharp

using System;
using System.Linq;

public class Kata
{
  public static int FindShort(string s)
  {
    return s.Split(' ').OrderBy(i => i.Length).Select(i=>i.Length).First();
  }
}

#!csharp

Kata.FindShort("John is the Best")

#!markdown

DESCRIPTION:
Jaden Smith, the son of Will Smith, is the star of films such as The Karate Kid (2010) and After Earth (2013). Jaden is also known for some of his philosophy that he delivers via Twitter. When writing on Twitter, he is known for almost always capitalizing every word. For simplicity, you'll have to capitalize each word, check out how contractions are expected to be in the example below.

Your task is to convert strings to how they would be written by Jaden Smith. The strings are actual quotes from Jaden Smith, but they are not capitalized in the same way he originally typed them.

Example:

Not Jaden-Cased: "How can mirrors be real if our eyes aren't real"
Jaden-Cased:     "How Can Mirrors Be Real If Our Eyes Aren't Real"

#!csharp

  using System.Globalization;
  public static string ToJadenCase(this string phrase)
  {
    if (phrase != null) {return CultureInfo.InvariantCulture.TextInfo.ToTitleCase(phrase.ToLower());}
    return String.Empty;
  }

#!csharp

  using System.Globalization;
  public static string ToJadenCase(this string phrase) =>phrase != null ? CultureInfo.InvariantCulture.TextInfo.ToTitleCase(phrase.ToLower()) : String.Empty;

#!csharp

ToJadenCase("this is john wesley")

#!csharp

// other cool solutions
using System;
using System.Linq;
public static class JadenCase
{
  public static string ToJadenCase(string phrase)
  {
    return String.Join(" ", phrase.Split().Select(i => Char.ToUpper(i[0]) + i.Substring(1)));
  }
}

#!csharp

using System;
using System.Text;
public static class JadenCase
{
  public static string ToJadenCase(string phrase)
  {
    var chars = phrase.ToCharArray();
    var res = new StringBuilder(phrase.Length);
    bool previousWhitespace = true;
    foreach (var c in chars)
    {
        if (char.IsWhiteSpace(c))
        {
            previousWhitespace = true;
            res.Append(c);
        }
        else if (previousWhitespace && Char.IsLetter(c))
        {
            res.Append(Char.ToUpper(c));
            previousWhitespace = false;
        }
        else
        {
            res.Append(c);
        }
    }
    return res.ToString();
  }
}

#!csharp

string str = "JOHNN"; // length = 5
//str[2]
for (int a = 0; a < str.Length; a++) // picker a = 0, 1, 2, 3, 4
{
    for (int b = a+1; b < str.Length; b++) // searcher/ compare b = 1,2,3,4
    {
        for (int c = b+1; c < str.Length; c++) // 2,3,4
        {
            Console.WriteLine($"{str[a]}, {str[b]}, {str[c]}");
        }
    }
    
}

#!csharp

bool stopper = true;
int counter = 0;
while (stopper)
{
    Console.WriteLine($"I'm {counter} and still less than 10 ");
    ++counter;
    if (counter == 10)
    {
        stopper = false;
    }
}

#!markdown

Create a function that takes an integer as an argument and returns "Even" for even numbers or "Odd" for odd numbers.

#!csharp

public class SolutionClass
  {
     public static string EvenOrOdd(int number)
     {
        if (number % 2 == 0)
        {
        return "Even";
      }
      else
        {
        return "Odd";
      }
     }
     
  }

#!csharp

public class SolutionClass
  {
    public static string EvenOrOdd(int number) => number % 2 == 0? "Even" : "Odd";

  }

#!markdown

DESCRIPTION:
Deoxyribonucleic acid (DNA) is a chemical found in the nucleus of cells and carries the "instructions" for the development and functioning of living organisms.

If you want to know more: http://en.wikipedia.org/wiki/DNA

In DNA strings, symbols "A" and "T" are complements of each other, as "C" and "G". Your function receives one side of the DNA (string, except for Haskell); you need to return the other complementary side. DNA strand is never empty or there is no DNA at all (again, except for Haskell).

More similar exercise are found here: http://rosalind.info/problems/list-view/ (source)

Example: (input --> output)

"ATTGC" --> "TAACG"
"GTAT" --> "CATA"

#!csharp

public class DnaStrand 
    {
        public static string MakeComplement(string dna)
        {
            //Your code
            if (dna != null)
            {
                string dnA = "";
                for(int i = 0; i < dna.Length; i++)
                {
                    string dnaSplit = dna[i] == 'A' ? "T": dna[i] == 'T' ? "A" : dna[i] == 'G' ? "C" : "G";
                    dnA += dnaSplit;
                    
                }
                return dnA;
            }
            

            return null;
        }
    }

#!csharp

DnaStrand.MakeComplement("ATTGCB")

#!csharp

// other cool solutions
using System;
using System.Collections.Generic;
using System.Linq;

public class DnaStrand 
{
        private static Dictionary<char, char> map =
            new Dictionary<char, char>
            {
                {'T', 'A'},
                {'A', 'T'},
                {'C', 'G'},
                {'G', 'C'}
            };
        
        public static string MakeComplement(string dna)
        {
            var mychars = dna.ToCharArray();

            var outChars = new String(mychars.Select(x => map[x]).ToArray());

            return outChars;
        }
}

#!csharp

using System;
using System.Linq;

public class DnaStrand
{
    public static string MakeComplement(string dna)
    {
        return string.Concat(dna.Select(GetComplement));
    }

    public static char GetComplement(char symbol)
    {
        switch (symbol)
        {
            case 'A':
                return 'T';
            case 'T':
                return 'A';
            case 'C':
                return 'G';
            case 'G':
                return 'C';
            default:
                throw new ArgumentException();
        }
    }
}

#!csharp

using System;
using System.Linq;
public class DnaStrand 
{
    public static string MakeComplement(string dna)
    {
    		return dna.Replace('T', '?').Replace('A', 'T').Replace('?', 'A').Replace('G', '?').Replace('C', 'G').Replace('?', 'C');
    }
}

#!csharp

using System;
using System.Linq;
using System.Collections.Generic;
public class DnaStrand 
{
        public static string MakeComplement(string dna)
        {
            return String.Join("", 
                   from ch in dna
                   select "AGCT"["TCGA".IndexOf(ch)]
                  );
                         
        }
}

#!csharp

public int[] Withdraw(int amount)
{
    int r100 = amount%100;// return the remainder of the division of amount by 100
    int d100 = amount/100; // division between amount and 100
    int r50 = r100%50; // 
    int d50 = r100/50;
    int r20 = r50%20;
    int d20 = r50/20;
    int[] withdraw = {d100, d50, d20};
    return withdraw;   
}

#!csharp

public int[] Withdraw(int amount)
{
    int howMany100InAmount = amount/100;
    int howManyAmountLeftAfter100 = amount%100;
    int howMany50InAmountLeftAfter100 = howManyAmountLeftAfter100/50;  
    int howManyAmountLeftAfter50 = howManyAmountLeftAfter100%50;
    int howMany20InAmountLeftAfter50 = howManyAmountLeftAfter50/20;
    //int howManyAmountLeftAfter20 = howManyAmountLeftAfter50%20;
    int[] withdraw = {howMany100InAmount, howMany50InAmountLeftAfter100, howMany20InAmountLeftAfter50};
    return withdraw;   
}

#!csharp

Withdraw(4765)

#!markdown

You probably know the "like" system from Facebook and other pages. People can "like" blog posts, pictures or other items. We want to create the text that should be displayed next to such an item.
Implement the function which takes an array containing the names of people that like an item. It must return the display text as shown in the examples:

[]                                -->  "no one likes this"
["Peter"]                         -->  "Peter likes this"
["Jacob", "Alex"]                 -->  "Jacob and Alex like this"
["Max", "John", "Mark"]           -->  "Max, John and Mark like this"
["Alex", "Jacob", "Mark", "Max"]  -->  "Alex, Jacob and 2 others like this"

Note: For 4 or more names, the number in "and 2 others" simply increases.

#!csharp

public string Likes(string[] names)
{
    int length = names.Length;
    string msg1 = "likes this", msg2 = "like this";
    string likes = length == 0 || names[0].Length < 2 ? $"no one {msg1}" : 
                    length == 1 && names[0].Length > 1 ? $"{names[0]} {msg1}" :
                    length == 2 ? $"{names[0]} and {names[1]} {msg2}" : 
                    length == 3 ? $"{names[0]}, {names[1]} and {names[2]} {msg2}" :
                    $"{names[0]}, {names[1]} and {length-2} others {msg2}";
    return likes;
}

#!csharp

Likes(new string[] {"Alex", "Jacob", "Mark", "Max", "John"})

#!markdown

DESCRIPTION:
In a factory a printer prints labels for boxes. For one kind of boxes the printer has to use colors which, for the sake of simplicity, are named with letters from a to m.

The colors used by the printer are recorded in a control string. For example a "good" control string would be aaabbbbhaijjjm meaning that the printer used three times color a, four times color b, one time color h then one time color a...

Sometimes there are problems: lack of colors, technical malfunction and a "bad" control string is produced e.g. aaaxbbbbyyhwawiwjjjwwm with letters not from a to m.

You have to write a function printer_error which given a string will return the error rate of the printer as a string representing a rational whose numerator is the number of errors and the denominator the length of the control string. Don't reduce this fraction to a simpler expression.

The string has a length greater or equal to one and contains only letters from ato z.

Examples:
s="aaabbbbhaijjjm"
printer_error(s) => "0/14"

s="aaaxbbbbyyhwawiwjjjwwm"
printer_error(s) => "8/22"

#!csharp

using System;
using System.Text.RegularExpressions;

public class Printer 
{
    public static string PrinterError(String s) 
    {
        // your code
        if (s != null)
        {
            string pattern = @"[n-z]";
            MatchCollection matches = Regex.Matches(s, pattern);
            string error = $"{matches.Count}/{s.Length}";
            return error;
        }

        return null;
    }
}

#!csharp

Printer.PrinterError("aaaxbbbbyyhwawiwjjjwwm")

#!csharp

// other kata solution
using System.Linq;

public class Printer 
{
    public static string PrinterError(string s) 
    {
        return s.Where(c => c > 'm').Count() + "/" + s.Length;
    }
}

#!csharp

using System;
using System.Linq;
public class Printer 
{
    public static string PrinterError(String s) 
    {
        return s.Count(x=>x>'m')+"/"+s.Count();
    }
}

#!markdown

Solution Regex trials

#!csharp

using System;
using System.Text.RegularExpressions;


string input = "The quick brown fox jumps over the lazy dog near New Zealand.";
string pattern = @"\b[n-z]\w*\b"; // match any word that starts with a letter between n and z

MatchCollection matches = Regex.Matches(input, pattern, RegexOptions.Multiline);
foreach (Match match in matches) {
    Console.WriteLine($"Found '{match.Value}' at position {match.Index}");
}
Console.WriteLine($"Total matches: {matches.Count}");

#!csharp

string input = "foxesnearNewZealandjump";
string pattern = @"[n-z]\w*"; // match any word that starts with a letter between n and z

MatchCollection matches = Regex.Matches(input, pattern);
foreach (Match match in matches) {
    Console.WriteLine($"Found '{match.Value}' at position {match.Index}");
}
Console.WriteLine($"Total matches: {matches.Count}");

#!csharp

string input = "foxesnearNewZealandjump";
string pattern = @"[n-z]\w*"; // match any word that starts with a letter between n and z

MatchCollection matches = Regex.Matches(input, pattern);
int matchCount = 0;
foreach (Match match in matches) {
    Console.WriteLine($"Found '{match.Value}' at position {match.Index}");
    matchCount += 1;
}
Console.WriteLine($"Total matches: {matchCount}");

#!csharp

string input = "foxesnearNewZealandjump";
string pattern = @"(?i)\b[n-z]\w*\b"; // match any word that starts with a letter between n and z

MatchCollection matches = Regex.Matches(input, pattern);
int matchCount = 0;
foreach (Match match in matches) {
    Console.WriteLine($"Found '{match.Value}' at position {match.Index}");
    matchCount += 1;
}
Console.WriteLine($"Total matches: {matchCount}");

#!csharp

string input = "foxesnearNewZealandjump";
string pattern = @"\b[n-z]\w*\b"; // match any word that starts with a letter between n and z

MatchCollection matches = Regex.Matches(input, pattern, RegexOptions.IgnoreCase);
int matchCount = 0;
foreach (Match match in matches) {
    Console.WriteLine($"Found '{match.Value}' at position {match.Index}");
    matchCount += 1;
}
Console.WriteLine($"Total matches: {matchCount}");

#!csharp

string input = "aaaxbbbbyyhwawiwjjjwwm";
string pattern = @"[n-z]"; // match any letter between n and z

MatchCollection matches = Regex.Matches(input, pattern, RegexOptions.IgnoreCase);
int matchCount = matches.Count;
Console.WriteLine($"Total matches: {matchCount}");

#!markdown

DESCRIPTION:
Given the triangle of consecutive odd numbers:

             1
          3     5
       7     9    11
   13    15    17    19
21    23    25    27    29
...
Calculate the sum of the numbers in the nth row of this triangle (starting at index 1) e.g.: (Input --> Output)

1 -->  1
2 --> 3 + 5 = 8

#!csharp

using System;
public static class Kata
{
  public static long RowSumOddNumbers(long n)
  {
    // TODO
    if (n != 0)
    {
      //int n = 5; // number of rows in the triangle
      int start =1; // starting number for the first row

      int[][] triangle = new int[n][]; // create a 2D array to store the triangle elements
      for (int i = 0; i < n; i++) {
          triangle[i] = new int[i + 1]; // create an array for each row in the triangle

          // print the odd numbers for the current row and store them in the 2D array
          int num = start + (i * (i + 1) / 2) * 2;
          for (int j = 0; j < triangle[i].Length; j++) {
              triangle[i][j] = num;
              num += 2;
          }
    }
      return triangle[n-1].Sum();
    }
    return 0;
  }
}

#!csharp

Kata.RowSumOddNumbers(72)

#!csharp

// some crazy solutions
using System;
public static class Kata
{
  public static long RowSumOddNumbers(long n)
  {
    return (long)Math.Pow(n, 3);
    
  }
}

#!csharp

// test codes
int n = 10; // number of rows in the triangle
int start =1; // starting number for the first row

int[][] triangle = new int[n][]; // create a 2D array to store the triangle elements
for (int i = 0; i < n; i++)
{
    triangle[i] = new int [i + 1]; // create an array for each row in the triangle
    // store odd number in the 2D array
    int num = start + (2*i);
    for (int j = 0; j <= i; j++)
    {
    triangle[i][j] = num;
    num += 2;
    }
}

for (int i = 0; i < n; i++)
{
    for (int j = 0; j <= i; j++)
    {
        Console.Write($"{triangle[i][j]} ");
    }

}
Console.WriteLine();

#!csharp

triangle

#!csharp

// test codes
int n = 10; // number of rows in the triangle
int start =1; // starting number for the first row

int[][] triangle = new int[n][]; // create a 2D array to store the triangle elements
for (int i = 0; i < n; i++)
{
    triangle[i] = new int [i+1]; // create an array for each row in the triangle
    // store odd number in the 2D array
    int num = start + (2*i);
/*     for (int j = 0; j < triangle[i].Length; j++)
    {
    triangle[i][j] = num;
    num += 2;
    } */
    int idx = 0;
    while (idx < triangle[i].Length)
    {
        triangle[i][idx] = num;
        num += 2;
        idx++;
    }
}

/* for (int i = 0; i < n; i++)
{
    for (int j = 0; j < triangle[i].Length; j++)
    {
        Console.Write($"{triangle[i][j]} ");
    }

} */
//Console.WriteLine();

#!csharp

triangle

#!csharp

 int n = 5; // number of rows in the triangle
        int start = 1; // starting number for the first row

        int[][] triangle = new int[n][]; // create a 2D array to store the triangle elements
        for (int i = 0; i < n; i++) {
            triangle[i] = new int[i + 1]; // create an array for each row in the triangle

            // print spaces before the numbers in each row
            for (int j = 0; j < n - i; j++) {
                Console.Write("  ");
            }

            // print the odd numbers for the current row and store them in the 2D array
            int num = start + (2 * i);
            int idx = 0;
            while (idx < triangle[i].Length) {
                Console.Write($"{num,2} ");
                triangle[i][idx] = num;
                num += 2;
                idx++;
            }

            Console.WriteLine(); // move to the next row
        }

        // sum the elements of each row and print the results
        for (int i = 0; i < n; i++) {
            int rowSum = 0;
            for (int j = 0; j < triangle[i].Length; j++) {
                rowSum += triangle[i][j];
            }
            Console.WriteLine($"Row {i+1} sum: {rowSum}");
        }

#!csharp

 int n = 5; // number of rows in the triangle
        int start = 1; // starting number for the first row

        int[][] triangle = new int[n][]; // create a 2D array to store the triangle elements
        for (int i = 0; i < n; i++) {
            triangle[i] = new int[i + 1]; // create an array for each row in the triangle

            // print spaces before the numbers in each row
            for (int j = 0; j < n - i; j++) {
                Console.Write("  ");
            }

            // print the odd numbers for the current row and store them in the 2D array
            int num = start + (i * (i + 1) / 2) * 2;
            for (int j = 0; j < triangle[i].Length; j++) {
                Console.Write($"{num,2} ");
                triangle[i][j] = num;
                num += 2;
            }

            Console.WriteLine(); // move to the next row
        }

        // sum the elements of each row and print the results
        for (int i = 0; i < n; i++) {
            int rowSum = 0;
            for (int j = 0; j < triangle[i].Length; j++) {
                rowSum += triangle[i][j];
            }
            Console.WriteLine($"Row {i+1} sum: {rowSum}");
        }

#!csharp

triangle

#!csharp

int n = 10; // number of rows in the triangle
int start = 1; // starting number for the first row

int[][] triangle = new int[n][]; // create a 2D array to store the triangle elements
for (int i = 0; i < n; i++) {
    triangle[i] = new int[i + 1]; // create an array for each row in the triangle

    // print the odd numbers for the current row and store them in the 2D array
    int num = start + (i * (i + 1) / 2) * 2;
    for (int j = 0; j < triangle[i].Length; j++) {
        triangle[i][j] = num;
        num += 2;
    }
    //return triangle[n-1].Sum();
}

#!csharp

triangle[3].Sum()

#!csharp

// rough
using System;
public static class Kata
{
  public static long RowSumOddNumbers(long n)
  {
    // TODO
    if (n != 0)
    {
      //int n = 5; // number of rows in the triangle
      int start =1; // starting number for the first row

      int[][] triangle = new int[n][]; // create a 2D array to store the triangle elements
      for (int i = 0; i < n; i++)
      {
          triangle[i] = new int [i + 1]; // create an array for each row in the triangle
          // store odd number in the 2D array
          int num = start + (2*i);
          for (int j = 0; j <= i; j++)
          {
          triangle[i][j] = num;
          num += 2;
          }
    }
      return triangle[n-1].Sum();
    }
    return 0;
  }
}

#!csharp

// test splits
int sum = 0;
string numbers = new string("1,      5,      6,      7");
string[] nums = numbers.Split(",".ToCharArray());
foreach(var item in nums)
{
    sum += Convert.ToInt32(item);
}
//sum

var number = new List<int>();
foreach(var item in nums)
{
    number.Add(Convert.ToInt32(item));
}
//number.Max()
number
//nums
//sum

#!csharp

var name = "John";
var reverseName = name.ToCharArray().Reverse<char>();
String.Join("", reverseName)

#!csharp

var myList = new List<int> {1,4,6,8};
myList.Clear();
myList

#!csharp

int sum = 0;
for (int i = 0; i < 3; i++)
{
    sum += i*i;
}
sum

#!csharp

bool result = false;
if(4==5)
{
    result = true;
}
result

#!csharp

static int Main()
{
   Console.WriteLine("I'm a method");
    return 1;
}

#!csharp

Main()
