#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

public class DomesticAnimal
{
    public string eat {get; set;}
    public virtual void Sound()
    {
        Console.WriteLine("Make sound");
    }
}

public class Dog: DomesticAnimal
{
    public string run {get; set;}
    public override void Sound()
    {
        Console.WriteLine("Dog Make sound");
    }
}

#!csharp

Dog bingo = new Dog();
DomesticAnimal Murphy = new Dog();
DomesticAnimal champ = new DomesticAnimal();

#!csharp

bingo.Sound()

#!csharp

Murphy.Sound()

#!csharp

champ.Sound()

#!csharp

string.Join("","      A b B a c k e     d      kd al dks    ".Order()).Trim()

#!markdown

Two-dimensional array [,]:
A two-dimensional array is a single, continuous block of memory that represents a rectangular grid of elements.
The size of both dimensions (rows and columns) is fixed during initialization, and it remains constant throughout the lifetime of the array.
To declare and initialize a two-dimensional array, you specify the size of each dimension within square brackets, like int[,] myArray = new int[rows, columns];.
Accessing elements in a two-dimensional array is done using the syntax myArray[row, column].
Example:

#!csharp

int[,] twoDArray = new int[3, 4];
twoDArray[0, 0] = 1;
twoDArray[1, 1] = 2;

#!csharp

// populate
for(var i = 0; i < 3; i++)
{
    for(var j = 0; j < 4; j++)
    {
        twoDArray[i,j] = (i+1)*j;
    }
}

#!csharp

twoDArray

#!markdown

Jagged array [][]:
A jagged array is an array of arrays, where each "row" can have a different length (number of columns).
Each "row" of the jagged array is essentially a separate array instance in memory. These individual arrays can have different sizes, providing more flexibility in managing memory allocation.
To declare and initialize a jagged array, you specify the size of the first dimension (number of rows) only, and then create each "row" (inner array) separately, like int[][] jaggedArray = new int[rows][];.
Accessing elements in a jagged array is done using the syntax jaggedArray[rowIndex][columnIndex].
Example:

#!csharp

int[][] jaggedArray = new int[3][];
jaggedArray[0] = new int[] { 1, 2, 3 };
jaggedArray[1] = new int[] { 4, 5 };
jaggedArray[2] = new int[] { 6, 7, 8, 9 };

#!csharp

jaggedArray

#!markdown

In summary, the key differences between [,] and [][] are how they store data in memory and their flexibility in terms of row sizes. Two-dimensional arrays have a fixed size for both dimensions and use a single block of memory, while jagged arrays consist of separate arrays, allowing variable row sizes. The choice between the two depends on the specific needs and requirements of your application.

#!csharp

int x = 9;

#!csharp

string name = "Chisom Adaeze";
int hashCode = Math.Abs(name.GetHashCode());
string slicedHashCode = hashCode.ToString().Substring(0,5);
string TicketNo = "FL-" + slicedHashCode;
TicketNo

#!csharp

int[] array = new int[6];
array[0] = 1;
array[1] = 2;
array[2] = 3;
array[3] = 4;
array[4] = 5;
array[5] = 0;

List<int> list = new List<int>();
list.Add(1);
list.Add(2);
list.Add(3);
list.Add(4);
list.Add(5);
list.Add(6);
list.Add(7);
list.Add(8);
list.Remove(7);

list

#!csharp

var numbers = new int[] {10,20,30,40,50,60};

//var counter = 0;
foreach(var element in numbers)
{
/*     if(counter%2==0)
    {
        Console.WriteLine(num);
    }
    counter++; */

    Console.WriteLine(element);
}

#!csharp

for(var i = 0; i < numbers.Length; i++) // 0,1,2,3.........Length of numbers - 1
{
    if(i%2==0)
    {
        Console.WriteLine(numbers[i]);
    }
}

#!csharp

int[] num = {1,2,3,4,5,5};

#!csharp

double[] ints = new double[10];
ints[9] = 10;
ints

#!csharp

// PEMDAS
// BEDMAS
(2+5)*7

#!csharp

var list = new List<int>() {1,3,5,5};

#!csharp

list.Add(9);
list.Count

#!csharp

var dict = new Dictionary<string, int>() {["A"] = 1, ["B"] = 2, ["C"] = 3};
dict["D"] = 4;

#!csharp

        Console.WriteLine("Grades");
        Console.WriteLine("------------------");

#!csharp

var dict = new Dictionary<string, int>();
string[] names = {"John", "James", "Michael", "Chisom"};
int[] scores = {90, 78, 45, 90};

/* dict["John"] = 98;
dict.Add("James", 89); */
for(var i = 0; i< names.Length; i++)
{
    dict[names[i]] = scores[i];
}
//dict

foreach(var items in dict)
{
    string name = items.Key;
    int score = items.Value;
    Console.WriteLine($"{name}\t{score}");
}

#!csharp

//using Newtonsoft.Json.Linq;

// Declare and initialize a JSON object
JObject jsonObject = new JObject();
jsonObject["name"] = "John Doe";
jsonObject["age"] = 30;
jsonObject["email"] = "john.doe@example.com";
jsonObject["isSubscribed"] = true;

// Nested JSON object
JObject addressObject = new JObject();
addressObject["city"] = "New York";
addressObject["zipCode"] = "10001";
jsonObject["address"] = addressObject;

// Nested JSON array
JArray hobbiesArray = new JArray("reading", "painting", "traveling");
jsonObject["hobbies"] = hobbiesArray;

// Convert the JSON object to a string
string jsonString = jsonObject.ToString();

#!csharp

jsonString

#!csharp

//using Newtonsoft.Json.Linq;

// Declare and initialize a JSON array
JArray jsonArray = new JArray();
jsonArray.Add("apple");
jsonArray.Add("orange");
jsonArray.Add("banana");
jsonArray.Add("grape");

// Convert the JSON array to a string
string jsonString = jsonArray.ToString();

#!csharp

jsonString

#!csharp

//using Newtonsoft.Json.Linq;

// Declare and initialize a JSON object
JObject jsonObject = new JObject()
{
    ["name"] = "John Doe",
    ["age"] = 30,
    ["email"] = "john.doe@example.com",
    ["isSubscribed"] = true
};


// Nested JSON object
JObject addressObject = new JObject()
{
    ["city"] = "New York",
    ["zipCode"] = "10001",
    
};

jsonObject["address"] = addressObject;


// Nested JSON array
JArray hobbiesArray = new JArray("reading", "painting", "traveling");
jsonObject["hobbies"] = hobbiesArray;

// Convert the JSON object to a string
string jsonString = jsonObject.ToString();

#!csharp

jsonString

#!csharp

2 < 1

#!csharp

int[] numbers = new int[] {8,6,7,8,9,7,5,8,4};
int smallest = numbers[0];
for(int i = 0; i < numbers.Length; i++) // i = 0,1,2,3,....Length of numbers - 1
{
    if(smallest > numbers[i])
    {
        smallest = numbers[i];
    }
}
return smallest;

#!csharp

int[] numbers = new int[] {8,6,7,8,9,7,5,8,4};

var smallest = numbers[0];
foreach(var num in numbers)
{
    if(smallest > num)
    {
        smallest = num;
    }
}
return smallest;

#!csharp

int[] numbers = new int[] {8,6,7,8,9,7,5,8,4};

numbers.Order().Last()

#!csharp

int x = 9;

x +=9

#!csharp

var numbers = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15};

var num = new int[] {numbers.Count(n=>n>0), numbers.Where(n=>n<0).Sum()};
num

#!csharp

using System;
using System.Collections.Generic;
using System.Linq;

public class Kata
{
    public static int[] CountPositivesSumNegatives(int[] input)
    {
      // separate negative from positive
      // count the positive to give the first element
      // sum the negative to give the second element
      if(input == null || input.Length == 0 )
        {
        return new int[] {};
      }      
      return new int[] {input.Count(n=>n>0), input.Where(n=>n<0).Sum()};
    }
}

#!csharp

Kata.CountPositivesSumNegatives(new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15})

#!markdown

Count the number of divisors of a positive integer n.

Random tests go up to n = 500000.

Examples (input --> output)
4 --> 3 // we have 3 divisors - 1, 2 and 4
5 --> 2 // we have 2 divisors - 1 and 5
12 --> 6 // we have 6 divisors - 1, 2, 3, 4, 6 and 12
30 --> 8 // we have 8 divisors - 1, 2, 3, 5, 6, 10, 15 and 30
Note you should only return a number, the count of divisors. The numbers between parentheses are shown only for you to see which numbers are counted in each case.

NUMBER THEORYMATHEMATICSFUNDAMENTALS

https://www.codewars.com/kata/542c0f198e077084c0000c2e/train/csharp

#!csharp

using System.Linq;
public class Kata
{
  public static int Divisors(int n)
  {
    // todo
    return Enumerable.Range(1,n).Count(x=>n%x==0);
  }
}

#!markdown

DESCRIPTION:
Given two arrays a and b write a function comp(a, b) (orcompSame(a, b)) that checks whether the two arrays have the "same" elements, with the same multiplicities (the multiplicity of a member is the number of times it appears). "Same" means, here, that the elements in b are the elements in a squared, regardless of the order.

Examples
Valid arrays
a = [121, 144, 19, 161, 19, 144, 19, 11]  
b = [121, 14641, 20736, 361, 25921, 361, 20736, 361]
comp(a, b) returns true because in b 121 is the square of 11, 14641 is the square of 121, 20736 the square of 144, 361 the square of 19, 25921 the square of 161, and so on. It gets obvious if we write b's elements in terms of squares:

a = [121, 144, 19, 161, 19, 144, 19, 11]
b = [11*11, 121*121, 144*144, 19*19, 161*161, 19*19, 144*144, 19*19]
Invalid arrays
If, for example, we change the first number to something else, comp is not returning true anymore:

a = [121, 144, 19, 161, 19, 144, 19, 11]  
b = [132, 14641, 20736, 361, 25921, 361, 20736, 361]
comp(a,b) returns false because in b 132 is not the square of any number of a.

a = [121, 144, 19, 161, 19, 144, 19, 11]  
b = [121, 14641, 20736, 36100, 25921, 361, 20736, 361]
comp(a,b) returns false because in b 36100 is not the square of any number of a.

Remarks
a or b might be [] or {} (all languages except R, Shell).
a or b might be nil or null or None or nothing (except in C++, COBOL, Crystal, D, Dart, Elixir, Fortran, F#, Haskell, Nim, OCaml, Pascal, Perl, PowerShell, Prolog, PureScript, R, Racket, Rust, Shell, Swift).
If a or b are nil (or null or None, depending on the language), the problem doesn't make sense so return false.

Note for C
The two arrays have the same size (> 0) given as parameter in function comp.

FUNDAMENTALS

https://www.codewars.com/kata/550498447451fbbd7600041c/csharp

#!csharp

Math.Sqrt(Math.Pow(9,99)/9)

#!csharp

Math.Pow(3,98)
