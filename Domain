Domain
1. Student
2. Grade
3. Course
4. StudentAddress

Relationship
one to one 
1.student and studentAddress

public class Student
{
    public int Id { get; set; }
    public string Name { get; set; }

    public int StudentAddressId { get; set; }  // Foreign key
    public StudentAddress Address { get; set; }  // Navigation property
}

public class StudentAddress
{
    public int StudentAddressId { get; set; }
    public string Address { get; set; }
    public string City { get; set; }
    public string State { get; set; }
    public string Country { get; set; }

    public int StudentId { get; set; } 
    public Student Student { get; set; }
}

public DbSet<Student> Students {get; set;}
public DbSet<StudentAddress> StudentAddresses {get; set;}

protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<Student>()
        .HasOne(s => s.Address)
        .WithOne(a => a.Student)
        .HasForeignKey<Student>(s => s.StudentAddressId);
}



one to many
1. student and grade

public class Student
{
    public int StudentId { get; set; }
    public string StudentName { get; set; }
    public int GradeId { get; set; }  // Foreign key

    public Grade Grade { get; set; }  // Navigation property
}

public class Grade
{
    public int GradeId { get; set; }
    public string GradeName { get; set; }
    public string Section { get; set; }

    public ICollection<Student> Students { get; set; }  // Collection navigation property
}


protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<Student>()
        .HasOne(s => s.Grade)
        .WithMany(g => g.Students)
        .HasForeignKey(s => s.GradeId);
}


many to many
1. student and course

public class Student
{
    public int StudentId { get; set; }
    public string StudentName { get; set; }

    public ICollection<Course> Courses { get; set; }  // Collection navigation property
}

public class Course
{
    public int CourseId { get; set; }
    public string CourseName { get; set; }
    public string Description { get; set; }
    public ICollection<Student> Students { get; set; }  // Collection navigation property
}

protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<Student>()
        .HasMany(s => s.Courses)
        .WithMany(c => c.Students)
        .UsingEntity(j => j.ToTable("StudentCourse"));  // Specify the join table name
}




Data
1. Context

public class SchoolDbContext : DbContext
{
    public DbSet<Student> Students { get; set; }
    public DbSet<StudentAddress> StudentAddresses { get; set; }
    public DbSet<Course> Courses { get; set; }
    public DbSet<Grade> Grades { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Student>()
            .HasOne(s => s.Address)
            .WithOne(a => a.Student)
            .HasForeignKey<Student>(s => s.StudentAddressId);

        modelBuilder.Entity<Student>()
            .HasMany(s => s.Courses)
            .WithMany(c => c.Students)
            .UsingEntity(j => j.ToTable("StudentCourse"));

        modelBuilder.Entity<Student>()
            .HasOne(s => s.Grade)
            .WithMany(g => g.Students)
            .HasForeignKey(s => s.GradeId)
            .OnDelete(DeleteBehavior.Restrict);
    }
}




/// All in one..

public class Student
{
    public int StudentId { get; set; }
    public string Name { get; set; }

    public int StudentAddressId { get; set; }  // Foreign key
    public StudentAddress Address { get; set; }  // Navigation property

    public int GradeId { get; set; }  // Foreign key
    public Grade Grade { get; set; }  // Navigation property

    public ICollection<StudentCourse> StudentCourses { get; set; }  // Collection navigation property
}

public class Grade
{
    public int GradeId { get; set; }
    public string GradeName { get; set; }

    public ICollection<Student> Students { get; set; }  // Collection navigation property
}

public class Course
{
    public int CourseId { get; set; }
    public string CourseName { get; set; }

    public ICollection<StudentCourse> StudentCourses { get; set; }  // Collection navigation property
}

public class StudentAddress
{
    public int StudentAddressId { get; set; }
    public string Address { get; set; }
    public string City { get; set; }
    public string State { get; set; }
    public string Country { get; set; }

    public int StudentId { get; set; }
    public Student Student { get; set; }
}

public class StudentCourse
{
    public int StudentId { get; set; }
    public Student Student { get; set; }
    public int CourseId { get; set; }
    public Course Course { get; set; }
}

public class SchoolDbContext : DbContext
{
    public DbSet<Student> Students { get; set; }
    public DbSet<Grade> Grades { get; set; }
    public DbSet<Course> Courses { get; set; }
    public DbSet<StudentAddress> StudentAddresses { get; set; }
    public DbSet<StudentCourse> StudentCourses { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Student>()
            .HasOne(s => s.Address)
            .WithOne(a => a.Student)
            .HasForeignKey<StudentAddress>(a => a.StudentId);

        modelBuilder.Entity<Student>()
            .HasOne(s => s.Grade)
            .WithMany(g => g.Students)
            .HasForeignKey(s => s.GradeId)
            .OnDelete(DeleteBehavior.Restrict);

        modelBuilder.Entity<StudentCourse>()
            .HasKey(sc => new { sc.StudentId, sc.CourseId });

        modelBuilder.Entity<StudentCourse>()
            .HasOne(sc => sc.Student)
            .WithMany(s => s.StudentCourses)
            .HasForeignKey(sc => sc.StudentId);

        modelBuilder.Entity<StudentCourse>()
            .HasOne(sc => sc.Course)
            .WithMany(c => c.StudentCourses)
            .HasForeignKey(sc => sc.CourseId);
    }
}
