#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

## Type Casting, Control Structures, Array, List, String and Operators 

#!markdown

### Type Casting

#!csharp

int a = 'a';
int b = 'j';
long sum = 4;
int sum2 = (int)(5.6);
int sum3 = Convert.ToInt32(5.6);
double sum4 = Math.Floor(5.6);
double sum5 = Math.Ceiling(5.6);
Console.WriteLine(a);
Console.WriteLine(b);
Console.WriteLine(sum2);
Console.WriteLine(sum3);
Console.WriteLine(sum4);
Console.WriteLine(sum5);
// Convert.ToBoolean to bool
string bull = "true";
bool bul = Convert.ToBoolean(bull);
Console.WriteLine(bul);
string cat = "false";
bool dog = Convert.ToBoolean(cat);
Console.WriteLine(dog);
// convert string to integer
string score = "30.25";
double scores = (int)(Convert.ToDouble(score));
Console.WriteLine(scores);

#!csharp

int x = 5;
int y = 2;
int z = x / y;
string xa = "John";
//string spaces = " ";
string xb = "Andrew";
Console.WriteLine(xa + " " + xb);
Console.WriteLine(z);

#!markdown

Heat Index Formula

#!markdown

c1 = −42.379
c2 = 2.04901523
c3 = 10.14333127
c4 = −0.22475541
c5 = −6.83783 × 10−3
c6 = −5.481717 × 10−2
c7 = 1.22874 × 10−3
c8 = 8.5282 × 10−4
c9 = −1.99 × 10−6

HI = c1 + c2T + c3R + c4TR + c5T2 + c6R2 + c7T2R + c8TR2 + c9T2R2

#!csharp

double c1 = -42.379, c2 = 2.04901523, c3 = 10.14333127, c4 = -0.22475541;
double c5 = -6.83783E-3, c6 = -5.481717E-2, c7 = 1.22874E-3;
double c8 = 8.5282E-4, c9 = -1.99E-6;
double temp = 32, humidity = 75;

double heatIndex = c1 + c2*temp + c3*humidity + c4*temp*humidity
 + c5*temp*temp + c6*humidity*humidity + c7*temp*temp*humidity
  + c8*temp*humidity*humidity + c9*temp*temp*humidity*humidity;

Console.WriteLine(heatIndex);

#!markdown

Relational Operators

== check equality
> check if one is greater than the other
< check if one is less than the other

#!csharp

int a = 70;
int b = 50;
bool z = (a!=b);
//Console.WriteLine(z);
//Console.WriteLine(a>=b);
//int c = 30;
int score = 47;


bool w = score > 30  && score < 39;
Console.WriteLine(w);

string grade;
if (score > 30  && score < 39) // condition
{
    // expression
    grade = "E";
} else if(score > 39 && score < 49)
{
    grade = "D";
}

Console.WriteLine(grade);

#!markdown

## Control Structures

#!markdown

Pseudo code

leap year is year that repeat itself in 4 years interval, year divisible by 4 without remainder

if (year divide 4 has no remainder)
// expression
(it is a leap year) true/false

#!csharp

int year = 2011;
Console.WriteLine(year%4);
//Console.WriteLine(year%400);
//Console.WriteLine(year%800);
Console.WriteLine(year/100);

#!markdown

if (Condition 1) {  
    // block of codes...statement 1....operation 1  expression 1  
} else if (condition 2) {  
    // codes...statement 2... operation 2  
} else if (condition 3) {  

}

#!csharp

int year = 1716;
if ((year%4) == 0) 
{
    Console.WriteLine("True");
} else {
    Console.WriteLine("False");
}

#!csharp

bool isLeapYear = false;
if (year%4 == 0)
{
    isLeapYear = true;
}

Console.WriteLine(isLeapYear);

#!markdown

## If greater than third one
Given an array of 3 integers, write a method that checks if multiplication or sum of two first numbers is greater than third one.
`Expected input and output`
IfGreaterThanThirdOne([2, 7, 12]) → `true`
IfGreaterThanThirdOne([-5, -8, 50]) → `false`

#!markdown

pseudo code
first varibale (multiplication) equals first element of the array times second element of the array
second variable (addition) equals first element of the array plus second element of the array
if (the multiplication or addition is greater that the third element in the array)
// statement
true;
else
false;

#!markdown

## Array

Array declaration
datatype[] variableName = {element1, element2, element3....elementn};

Example
Array of integers
int[] intArray = {1,2,4,5,6};

Index an array
Array[index] ...//index are integers 

#!csharp

int[] intArray = {19,23,43,56,62};
//Console.WriteLine(intArray);
Console.WriteLine(intArray[1]);

#!csharp

int[] intArray = {-5, -8, 50};
int multiply = intArray[0] * intArray[1];
int addition = intArray[0] + intArray[1];
bool isGreater = false;
if (multiply > intArray[2] || addition > intArray[2])
{
    isGreater = true;
}
Console.WriteLine(isGreater);

#!markdown

If has neighbour
Given three letter long string, write a method that checks if at least one neighbour of middle letter is its neighbour in the alphabet.
Expected input and output
IsLonelyIsland("XYZ") → True
IsLonelyIsland("GWK") → False

#!csharp

class IfHasNeighbourTask
    {
        public static bool IfHasNeighbour(string word)
        {
            return word[0] == word[1] - 1 || word[0] == word[1] + 1 || word[2] == word[1] - 1 || word[2] == word[1] + 1;
        }

        public static void Main()
        {
            Console.WriteLine(IfHasNeighbour("DCA")); // True
            Console.WriteLine(IfHasNeighbour("PRT")); // False
        }
    }

#!csharp

Console.WriteLine(IfHasNeighbourTask.IfHasNeighbour("DCA")); // True
Console.WriteLine(IfHasNeighbourTask.IfHasNeighbour("PRT")); // False
