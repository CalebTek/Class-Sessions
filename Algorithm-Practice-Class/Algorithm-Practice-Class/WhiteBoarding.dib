#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

**TASK 1**  
Given five positive integers, find the minimum and maximum values that can be calculated by summing exactly four of the five integers. Then print the respective minimum and maximum values as a single line of two space-separated long integers.  
**Example:**  
arr = [1, 3, 5, 7, 9]  
The minimum sum is 1 + 3 + 5 + 7 = 16 and the maximum sum is 3 + 5 + 7 + 9 = 24.  
The function prints 16 24  
**Function Description:**  
Complete the miniMaxSum function in the editor below.  
miniMaxSum has the following parameter(s):  
arr: an array of integers  
**Print:**  
Print two space-separated integers on one line: the minimum sum and the maximum sum of of elements.  
**Input Format:**  
A single line of five space-separated integers.  
**Output Format:**  
Print two space-separated long integers denoting the respective minimum and maximum values that can be calculated by summing exactly four of the five integers. (The output can be greater than a 32 bit integer.)  
**Sample Input:**  
1 2 3 4 5  
**Sample Output:**  
10 14

#!csharp

 public static int[] ArrayOfSums(int[] array)
    {
      var sumArray = new int[array.Length];
      for (var i = 0; i < array.Length; i++)
      {
         var sum = 0;
        for (var j = 0; j < array.Length; j++)
        {
        if (i == j){
            continue;
            }
            
            sum += array[j];
            }
        sumArray[i] = sum;

       
      }
      return new int[2] {sumArray.Min(), sumArray.Max()};
    }

#!csharp

ArrayOfSums(new int[] {1, 3, 5, 7, 9})

#!csharp

 public static string ArrayOfSums(int[] array)
    {
      var sumArray = new int[array.Length];
      for (var i = 0; i < array.Length; i++)
      {
         var sum = 0;
        for (var j = 0; j < array.Length; j++)
        {
        if (i == j){
            continue;
            }
            
            sum += array[j];
            }
        sumArray[i] = sum;

       
      }
      return $"{sumArray.Min()} {sumArray.Max()}";
    }

#!csharp

ArrayOfSums(new int[] {1, 3, 5, 7, 9});
ArrayOfSums(new int[] {1, 2, 3, 4, 5})

#!csharp

public static void MiniMaxSum(int[] arr)
        {
            int maxValue = 0;
            int minValue = 0;
            foreach (int i in arr)
            {
                maxValue = Math.Max(maxValue, i);
                minValue = Math.Min(minValue, i+1);
            }

            int smallestSum = 0;
            int largestSum = 0;

            foreach (int i in arr)
            {
                if (i != minValue)
                    smallestSum += i;
                if (i != maxValue)
                    largestSum += i;
            }

            Console.WriteLine(smallestSum);
            Console.WriteLine(largestSum);
        }

#!csharp

MiniMaxSum(new int[] {1, 3, 5, 7, 9})

#!csharp

    var arr = new int[] {1, 2, 3, 4, 5};
    int maxValue = 0;
    int minValue = 0;
    foreach (int i in arr)
    {
        maxValue = Math.Max(maxValue, i);
        minValue = Math.Min(minValue, i);
    }

    //maxValue;
    minValue

#!csharp

var arr = new int[] {1,2,4};
arr.Max()

#!markdown

{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1
\pard\sa200\sl276\slmult1\b\f0\fs22\lang9 TASK 2\b0\line\line\b DESCRIPTION:\b0\par
Make a program that filters a list of strings and returns a list with only your friends name in it.\par
If a name has exactly 4 letters in it, you can be sure that it has to be a friend of yours! Otherwise, you can be sure he's not...\par
Ex: Input = ["Ryan", "Kieran", "Jason", "Yous"], Output = ["Ryan", "Yous"]\par
i.e ==> friend ["Ryan", "Kieran", "Mark"] `shouldBe` ["Ryan", "Mark"]\par
Note: keep the original order of the names in the output.\par
}

#!csharp

public List<string> ArrayOfFriends(List<string> friends)
{
    var friendList = new List<string>();
    foreach(var friend in friends)
    {
        if(friend.Length == 4)
        {
            friendList.Add(friend);
        }
    }
    return friendList;
}

#!csharp

ArrayOfFriends(new List<string> {"Ryan", "Kieran", "Jason", "Yous"});
ArrayOfFriends(new List<string> {"Ryan", "Kieran", "Mark"})

#!markdown

**TASK 3**  
**DESCRIPTION**  
The user will input a string and the method should return the reverse of that string  
Example:  
input: hello, output: olleh  
input: hello world, output: dlrow olleh

#!csharp

var str = "John Wes".Reverse();
string.Join("", str);
str

#!csharp

var str = "This is an example!";
string.Join(" ",str.Split().Reverse());

var strSplit = str.Split();
strSplit.Reverse(x=>x.ToArray())

#!csharp

public string ReverseString(string word)
{
    return string.Join("", word.Reverse()); // this code explains 
}

#!csharp

ReverseString("hello");
ReverseString("hello world")

#!csharp

public string ReverseString(string word)
{
    var reverseWord = "";
    for(var i = word.Length-1; i >=0; i--)
    {
        reverseWord += word[i];
    }
    return reverseWord;
}

#!csharp

ReverseString("hello world")

#!csharp

var list = new List<string> {"Ryan", "Kieran", "Jason", "Yous"};
String.Format("{0}", list)

#!markdown

Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol Value
I 1
V 5
X 10
L 50
C 100
D 500
M 1000
For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9.
X can be placed before L (50) and C (100) to make 40 and 90.
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer.

Example 1:

Input: s = "III"
Output: 3
Explanation: III = 3.
Example 2:

Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
Example 3:

Input: s = "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.

Constraints:

1 <= s.length <= 15
s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').
It is guaranteed that s is a valid roman numeral in the range [1, 3999].

#!csharp

using System.Collections.Generic;

public static class Solution
 {
    public static int RomanToInt(string s) 
    {
        Dictionary<char, int> romanValues = new Dictionary<char, int>
        {
            {'I', 1},
            {'V', 5},
            {'X', 10},
            {'L', 50},
            {'C', 100},
            {'D', 500},
            {'M', 1000}
        };
        
        int result = 0;
        
        for (int i = 0; i < s.Length; i++)
        {
            if ((i < s.Length - 1) && romanValues[s[i]] < romanValues[s[i + 1]])
            {
                result -= romanValues[s[i]];
            }
            else
            {
                result += romanValues[s[i]];
            }
        }
        
        return result;
    }
}

#!csharp

using System.Collections.Generic;

public static class Solution
 {
    public static int RomanToInt(string s) 
    {
        Dictionary<char, int> romanValues = new Dictionary<char, int>
        {
            {'I', 1},
            {'V', 5},
            {'X', 10},
            {'L', 50},
            {'C', 100},
            {'D', 500},
            {'M', 1000}
        };

        //var roman = new Char[] {'I', 'V', 'X', 'L', 'C', 'D', 'M'};
        //var values = new int[] {1, 5, 10, 50, 100, 500, 1000};
        
        int result = 0;
        
        for (int i = 0; i < s.Length; i++) // III i = 0, 1 , 2 
        {
            if ((i < s.Length - 1) && romanValues[s[i]] < romanValues[s[i + 1]])
            {
                result -= romanValues[s[i]];
            }
            else
            {
                result += romanValues[s[i]];
            }
        }
        
        return result;
    }
}

#!csharp

Solution.RomanToInt("IVIV") // i = 0, 1, 2, 3 
// 1 0 - 1 = -1 
// 2 -1 + 5 = 4
// 3 4 + 1 = 5

#!csharp

2<2

#!csharp

var roman = new Char[] {'I', 'V', 'X', 'L', 'C', 'D', 'M'};
var values = new int[] {1, 5, 10, 50, 100, 500, 1000};
Dictionary<char, int> romanValues = new Dictionary<char, int>
{
    {'I', 1},
    {'V', 5},
    {'X', 10},
    {'L', 50},
    {'C', 100},
    {'D', 500},
    {'M', 1000}
};
romanValues[roman[0]] < romanValues[roman[1]]

#!markdown

Complete the solution so that the function will break up camel casing, using a space between words.

Example
"camelCasing" => "camel Casing"
"identifier" => "identifier"
"" => ""

#!csharp

using System.Collections.Generic;
using System.Text;
public class Kata
{
  public static string BreakCamelCase(string str)
  {
    // complete the function
    // check if a character in string is uppercase
    // if uppercase check is true, add a space before the case.
    //var strList = new List<char>();
    var strList = new StringBuilder();
    foreach(char chars in str)
      {
        if(char.IsUpper(chars))
          {
            //strList.Add(' ');
            strList.Append(' ');
          }
         //strList.Add(chars);
         strList.Append(chars);
        }
      //return string.Join("", strList);
      return strList.ToString();
      }
    }

#!csharp

using System.Text.RegularExpressions;

public class Kata
{
  public static string BreakCamelCase(string str) =>
    new Regex("([A-Z])").Replace(str, " $1");
}

#!csharp

using System;
using System.Linq;

public class Kata
{
  public static string BreakCamelCase(string str)
  {
    return string.Concat(str.Select(c => Char.IsUpper(c) ? " " + c : c.ToString()));
  }
}

#!csharp

"  *\n ***\n*****\n ***\n  *\n"

#!csharp

using System;

public class Diamond
{
    public static string PrintDiamond(int size)
    {
        if (size < 1 || size % 2 == 0)
        {
            throw new ArgumentException("Size should be a positive odd number.");
        }

        string diamond = "";

        // Top half of the diamond
        for (int i = 0; i < size; i += 2)
        {
            diamond += PrintLine(size, i);
        }

        // Bottom half of the diamond
        for (int i = size - 2; i >= 0; i -= 2)
        {
            diamond += PrintLine(size, i);
        }

        return diamond;
    }

    private static string PrintLine(int size, int stars)
    {
        int spaces = (size - stars) / 2;

        string line = new string(' ', spaces) + new string('*', stars + 1) + "\n";

        return line;
    }


}

#!csharp

int size = 5;
string diamond = Diamond.PrintDiamond(size);
Console.WriteLine(diamond);
 

#!csharp

using System;

public class Diamond
{
    public static string PrintDiamond(int size)
    {
        if (size < 1 || size % 2 == 0)
        {
            throw new ArgumentException("Size should be a positive odd number.");
        }

        string diamond = "";

        // Top half of the diamond
        for (int i = 0; i < size; i += 2)
        {
            diamond += PrintLine(size, i);
        }

        // Bottom half of the diamond
        for (int i = size - 2; i >= 0; i -= 2)
        {
            diamond += PrintLine(size, i);
        }

        return diamond;
    }

    private static string PrintLine(int size, int stars)
    {
        int spaces = (size - stars) / 2;

        string line = new string(' ', spaces) + new string('*', stars + 1) + "\n";

        return line;
    }


}
