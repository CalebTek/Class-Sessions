#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

using System.Linq;
using System.Collections;
public class Challenge
{
    public static int[] ArrayOfProducts(int[] array)
    {
      var productArray = new int[array.Length];
      for (var i = 0; i < array.Length; i++)
      {
         var product = 1;
        for (var j = 0; j < array.Length; j++)
        {
        if (i == j){
            continue;
            }
            
            product *= array[j];
            }
        productArray[i] = product;

/*
        if (array[i] !=0)
        {
           productArray[i] = product/array[i];
        } */
       
      }
      return productArray;
    }
}

#!csharp

Challenge.ArrayOfProducts(new int[]{1,2,0})

#!csharp

public string AddString(string str)
{
    var result = String.Empty;
    for(var i = 0; i < str.Length; i++)
    {
        result += str.Substring(0, (i+1));
    }
    return result;
}

#!csharp

AddString("abcde")

#!markdown

Write a function named setAlarm which receives two parameters. The first parameter, employed, is true whenever you are employed and the second parameter, vacation is true whenever you are on vacation.

The function should return true if you are employed and not on vacation (because these are the circumstances under which you need to set an alarm). It should return false otherwise. Examples:

setAlarm(true, true) -> false
setAlarm(false, true) -> false
setAlarm(false, false) -> false
setAlarm(true, false) -> true

#!csharp

public class Kata {
  public static bool SetAlarm(bool employed, bool vacation) {
    // your code here
    return employed && !vacation ? true: false; 
  }
}

#!csharp

public class Program {
	public static LinkedList ReverseLinkedList(LinkedList head) {
		// Write your code here.
		LinkedList previousNode = null;
      LinkedList currentNode = head;
      while(currentNode !=null)
      {
        LinkedList nextNode = currentNode.Next;
        currentNode.Next = previousNode;
        previousNode = currentNode;
        currentNode = nextNode;
      }
      return previousNode;
      //return null;
	}

	public class LinkedList {
		public int Value;
		public LinkedList Next = null;

		public LinkedList(int value) {
			this.Value = value;
		}
	}
}

#!csharp

var linked = new Program.LinkedList(10);

#!csharp

Program.ReverseLinkedList(linked)

#!csharp

linked

#!csharp

using System;

public class Program
{
    public static LinkedList ReverseLinkedList(LinkedList head)
    {
        LinkedList previousNode = null;
        LinkedList currentNode = head;
        while (currentNode != null)
        {
            LinkedList nextNode = currentNode.Next;
            currentNode.Next = previousNode;
            previousNode = currentNode;
            currentNode = nextNode;
        }
        return previousNode;
    }

    public class LinkedList
    {
        public int Value;
        public LinkedList Next = null;

        public LinkedList(int value)
        {
            this.Value = value;
        }
    }

    public static void PrintLinkedList(LinkedList head)
    {
        LinkedList currentNode = head;
        while (currentNode != null)
        {
            Console.Write(currentNode.Value + " -> ");
            currentNode = currentNode.Next;
        }
        Console.WriteLine("null");
    }
}

#!csharp

        // Creating a linked list: 1 -> 2 -> 3 -> 4 -> 5
        Program.LinkedList node5 = new Program.LinkedList(5);
        Program.LinkedList node4 = new Program.LinkedList(4) { Next = node5 };
        Program.LinkedList node3 = new Program.LinkedList(3) { Next = node4 };
        Program.LinkedList node2 = new Program.LinkedList(2) { Next = node3 };
        Program.LinkedList node1 = new Program.LinkedList(1) { Next = node2 };

        Console.WriteLine("Original Linked List:");
        Program.PrintLinkedList(node1);

        // Reversing the linked list
        Program.LinkedList reversedHead = Program.ReverseLinkedList(node1);

        Console.WriteLine("\nReversed Linked List:");
        Program.PrintLinkedList(reversedHead);

#!csharp

Program.LinkedList previousNode = null;
Program.LinkedList currentNode = node5;
Program.LinkedList nextNode = currentNode.Next;
currentNode.Next = previousNode;
previousNode = currentNode;
currentNode = nextNode;

#!csharp

currentNode

#!csharp

nextNode

#!csharp

previousNode

#!csharp

node5

#!html

<!DOCTYPE html>
<html>
<head>
  <title>Click Counter</title>
</head>
<body>
  <div id="app">
    <h1>Counter: <span class = "counter">0</span></h1>
    <button class = "increment" >Increment</button>
    <button class = "decrement" >Decrement</button>
  </div>
  <script src="src/index.js"></script>
</body>
</html>

#!html

body {
  background-color: white;
  font-family: sans-serif;
}

#!javascript

import "./style.css";

// TODO (see instructions)


const counterDisplayElem = document.querySelector('.counter');

const counterMinusElem = document.querySelector('.decrement');
const counterPlusElem = document.querySelector('.increment');



/*
const counterDisplayElem = document.getElementsByClassName('counter')[0];
const counterMinusElem = document.getElementsByClassName('decrement')[0];
const counterPlusElem = document.getElementsByClassName('increment')[0];
*/
let count = 0;

function updateDisplay()
{
  counterDisplayElem.textContent = count;
}

/*
function increment() {
  count++;
  updateDisplay();
}


function decrement()
{
  count--;
  updateDisplay();
}
*/


counterPlusElem.addEventListener('click', () =>{
  count++;
  updateDisplay();
});

counterMinusElem.addEventListener('click', () =>{
  count--;
  updateDisplay();
});

#!javascript

require("util").inspect.defaultOptions.depth = null;
jest.setTimeout(2000);
const baseURL = process.env.TEST_BASE_URL;

// Show logs from the page inside labeled container
const onPageConsole = msg => {
  console.log(`<LOG::page console.${msg.type()}>${msg.text().replace(/\n/g, "<:LF:>")}`);
};

describe("Click Counter", () => {
  beforeEach(async () => {
    if (!page.listeners("console").includes(onPageConsole)) {
      page.on("console", onPageConsole);
    }
    
    await page.setDefaultTimeout(2000);
    await page.goto(baseURL, {waitUntil: "load"});
  });
  
  it("should have an element with the class '.counter'", async () => {
    const counterElem = await page.evaluate(() => document.querySelector(".counter"));
    expect(counterElem).not.toBeNull();
  });
  
  it("should have an element with the class '.increment'", async () => {
    const incElem = await page.evaluate(() => document.querySelector(".increment"));
    expect(incElem).not.toBeNull();
  });
  
  it("should have an element with the class '.decrement'", async () => {
    const decElem = await page.evaluate(() => document.querySelector(".decrement"));
    expect(decElem).not.toBeNull();
  });
  
  it("should have a default value of 0", async () => {
    const counterElem = await page.$(".counter");
    expect(counterElem).not.toBeNull();
    const value = await page.evaluate(el => el.textContent, counterElem);
    expect(value).toEqual("0");
  });
  
  it("should increase the counter by 1 when '.increment' is clicked", async () => {
    const incElem = await page.$(".increment");
    expect(incElem).not.toBeNull();
    await incElem.click();
    const counterElem = await page.$(".counter");
    expect(counterElem).not.toBeNull();
    const value = await page.evaluate(el => el.textContent, counterElem);
    expect(value).toEqual("1");
  });
  
  it("should decrease the counter by 1 when '.decrement' is clicked", async () => {
    const decElem = await page.$(".decrement");
    expect(decElem).not.toBeNull();
    await decElem.click();
    const counterElem = await page.$(".counter");
    expect(counterElem ).not.toBeNull();
    const value = await page.evaluate(el => el.textContent, counterElem);
    expect(value).toEqual("-1");
  });
});

#!markdown

using System;
using System.Collections.Generic;
using NUnit.Framework;

[TestFixture]
public class ProgramTest {
	[Test]
	public void TestCase1() {
		Program.LinkedList test = newLinkedList(new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8});
		List<int> result = toList(Program.StaggerLinkedList(test));
		int[] expected = new int[] {0, 2, 1, 4, 3, 6, 5, 8, 7};

		Assert.True(arraysEqual(result, expected));
	}

	[Test]
	public void TestCase2() {
		Program.LinkedList test = newLinkedList(new int[] {0, 1, 2, 3, 4, 5, 6, 7});
		List<int> result = toList(Program.StaggerLinkedList(test));
		int[] expected = new int[] {0, 2, 1, 4, 3, 6, 5, 7};

		Assert.True(arraysEqual(result, expected));
	}

	[Test]
	public void TestCase3() {
		Program.LinkedList test = null;
		Program.LinkedList result = Program.StaggerLinkedList(test);
		int[] expected = null;

		Assert.AreEqual(result, expected);
	}

	[Test]
	public void TestCase4() {
		Program.LinkedList test = newLinkedList(new int[] {42});
		List<int> result = toList(Program.StaggerLinkedList(test));
		int[] expected = new int[] {42};

		Assert.True(arraysEqual(result, expected));
	}

	[Test]
	public void TestCase5() {
		Program.LinkedList test = newLinkedList(new int[] {0, 1});
		List<int> result = toList(Program.StaggerLinkedList(test));
		int[] expected = new int[] {0, 1};

		Assert.True(arraysEqual(result, expected));
	}

	[Test]
	public void TestCase6() {
		Program.LinkedList test = newLinkedList(new int[] {0, 1, 2});
		List<int> result = toList(Program.StaggerLinkedList(test));
		int[] expected = new int[] {0, 2, 1};

		Assert.True(arraysEqual(result, expected));
	}

	public Program.LinkedList newLinkedList(int[] values) {
		Program.LinkedList ll = new Program.LinkedList(values[0]);
		Program.LinkedList current = ll;
		for (int i = 1; i < values.Length; i++) {
			current.Next = new Program.LinkedList(values[i]);
			current = current.Next;
		}
		return ll;
	}

	public List<int> toList(Program.LinkedList ll) {
		List<int> arr = new List<int>();
		Program.LinkedList current = ll;
		while (current != null) {
			arr.Add(current.Value);
			current = current.Next;
		}
		return arr;
	}

	public bool arraysEqual(List<int> arr1, int[] arr2) {
		if (arr1.Count != arr2.Length) return false;
		for (int i = 0; i < arr1.Count; i++) {
			if (arr1[i] != arr2[i]) return false;
		}
		return true;
	}
}

#!csharp

public class Program {
	public static LinkedList StaggerLinkedList(LinkedList head) {
		// Write your code here.
      if(head == null || head.Next == null){
        return head;
      }
          
    LinkedList even = head, odd = head.Next, oddHead = odd;
      while (odd != null && odd.Next != null)
      {
        even.Next = odd.Next;
        even = even.Next;
        odd.Next = even.Next;
        odd = odd.Next;
        //even.Next = oddHead;
      }
     even.Next = oddHead;
      
	return head;
	}

	public class LinkedList {
		public int Value;
		public LinkedList Next = null;

		public LinkedList(int value) {
			this.Value = value;
		}
	}
}
