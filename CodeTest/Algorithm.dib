#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

using System.Linq;
using System.Collections;
public class Challenge
{
    public static int[] ArrayOfProducts(int[] array)
    {
      var productArray = new int[array.Length];
      for (var i = 0; i < array.Length; i++)
      {
         var product = 1;
        for (var j = 0; j < array.Length; j++)
        {
        if (i == j){
            continue;
            }
            
            product *= array[j];
            }
        productArray[i] = product;

/*
        if (array[i] !=0)
        {
           productArray[i] = product/array[i];
        } */
       
      }
      return productArray;
    }
}

#!csharp

Challenge.ArrayOfProducts(new int[]{1,2,0})

#!csharp

public string AddString(string str)
{
    var result = String.Empty;
    for(var i = 0; i < str.Length; i++)
    {
        result += str.Substring(0, (i+1));
    }
    return result;
}

#!csharp

AddString("abcde")

#!markdown

Write a function named setAlarm which receives two parameters. The first parameter, employed, is true whenever you are employed and the second parameter, vacation is true whenever you are on vacation.

The function should return true if you are employed and not on vacation (because these are the circumstances under which you need to set an alarm). It should return false otherwise. Examples:

setAlarm(true, true) -> false
setAlarm(false, true) -> false
setAlarm(false, false) -> false
setAlarm(true, false) -> true

#!csharp

public class Kata {
  public static bool SetAlarm(bool employed, bool vacation) {
    // your code here
    return employed && !vacation ? true: false; 
  }
}

#!csharp

public class Program {
	public static LinkedList ReverseLinkedList(LinkedList head) {
		// Write your code here.
		LinkedList previousNode = null;
      LinkedList currentNode = head;
      while(currentNode !=null)
      {
        LinkedList nextNode = currentNode.Next;
        currentNode.Next = previousNode;
        previousNode = currentNode;
        currentNode = nextNode;
      }
      return previousNode;
      //return null;
	}

	public class LinkedList {
		public int Value;
		public LinkedList Next = null;

		public LinkedList(int value) {
			this.Value = value;
		}
	}
}

#!csharp

var linked = new Program.LinkedList(10);

#!csharp

Program.ReverseLinkedList(linked)

#!csharp

linked

#!csharp

using System;

public class Program
{
    public static LinkedList ReverseLinkedList(LinkedList head)
    {
        LinkedList previousNode = null;
        LinkedList currentNode = head;
        while (currentNode != null)
        {
            LinkedList nextNode = currentNode.Next;
            currentNode.Next = previousNode;
            previousNode = currentNode;
            currentNode = nextNode;
        }
        return previousNode;
    }

    public class LinkedList
    {
        public int Value;
        public LinkedList Next = null;

        public LinkedList(int value)
        {
            this.Value = value;
        }
    }

    public static void PrintLinkedList(LinkedList head)
    {
        LinkedList currentNode = head;
        while (currentNode != null)
        {
            Console.Write(currentNode.Value + " -> ");
            currentNode = currentNode.Next;
        }
        Console.WriteLine("null");
    }
}

#!csharp

        // Creating a linked list: 1 -> 2 -> 3 -> 4 -> 5
        Program.LinkedList node5 = new Program.LinkedList(5);
        Program.LinkedList node4 = new Program.LinkedList(4) { Next = node5 };
        Program.LinkedList node3 = new Program.LinkedList(3) { Next = node4 };
        Program.LinkedList node2 = new Program.LinkedList(2) { Next = node3 };
        Program.LinkedList node1 = new Program.LinkedList(1) { Next = node2 };

        Console.WriteLine("Original Linked List:");
        Program.PrintLinkedList(node1);

        // Reversing the linked list
        Program.LinkedList reversedHead = Program.ReverseLinkedList(node1);

        Console.WriteLine("\nReversed Linked List:");
        Program.PrintLinkedList(reversedHead);

#!csharp

Program.LinkedList previousNode = null;
Program.LinkedList currentNode = node5;
Program.LinkedList nextNode = currentNode.Next;
currentNode.Next = previousNode;
previousNode = currentNode;
currentNode = nextNode;

#!csharp

currentNode

#!csharp

nextNode

#!csharp

previousNode

#!csharp

node5
